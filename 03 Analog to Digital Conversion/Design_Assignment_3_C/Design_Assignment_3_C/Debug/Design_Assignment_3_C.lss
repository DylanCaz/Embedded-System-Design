
Design_Assignment_3_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000358  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800124  00800124  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d01  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a53  00000000  00000000  000011d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ba  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000020e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000583  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000108  00000000  00000000  000026f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000027fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 e5       	ldi	r30, 0x58	; 88
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 32       	cpi	r26, 0x24	; 36
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e2       	ldi	r26, 0x24	; 36
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ad 32       	cpi	r26, 0x2D	; 45
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 14 01 	call	0x228	; 0x228 <main>
  ea:	0c 94 aa 01 	jmp	0x354	; 0x354 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <adc_init>:


//Function to initialize/configure ADC
void adc_init(void)
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // ADC_CLK = 16MHz/ 128 = 125kHz
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	87 60       	ori	r24, 0x07	; 7
  fa:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0); // AVcc = 5V
  fc:	ac e7       	ldi	r26, 0x7C	; 124
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	8c 91       	ld	r24, X
 102:	80 64       	ori	r24, 0x40	; 64
 104:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN); // enables ADC
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // starting ADC conversion
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <read_adc>:
}
// Function to read channel
uint16_t read_adc(uint8_t ADCchannel)
{
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F); // select ADC with safety mask
 114:	ec e7       	ldi	r30, 0x7C	; 124
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	90 81       	ld	r25, Z
 11a:	90 7f       	andi	r25, 0xF0	; 240
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	89 2b       	or	r24, r25
 120:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Starting new conversion
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));	// Waiting until conversion is complete
 12c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 130:	86 fd       	sbrc	r24, 6
 132:	fc cf       	rjmp	.-8      	; 0x12c <read_adc+0x18>
	return ADCW; // Return ADC value of chosen channel
 134:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 138:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 13c:	08 95       	ret

0000013e <USART_init>:
//Function to initialize and configure USART
void USART_init(void)
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER >> 8);
 13e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 142:	87 e6       	ldi	r24, 0x67	; 103
 144:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); // enable transmission and reception
 148:	88 e1       	ldi	r24, 0x18	; 24
 14a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // set frame formate to 8bits, no parity, 1
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 154:	08 95       	ret

00000156 <USART_send>:
}
void USART_send(unsigned char data)
{
	while (!(UCSR0A & (1 <<UDRE0)));
 156:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 15a:	95 ff       	sbrs	r25, 5
 15c:	fc cf       	rjmp	.-8      	; 0x156 <USART_send>
	UDR0 = data;
 15e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 162:	08 95       	ret

00000164 <USART_tx_string>:
}
// Function to send string to serial port
void USART_tx_string( char *stringPtr ) 
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
	while ((*stringPtr != '\0')) 
 16a:	03 c0       	rjmp	.+6      	; 0x172 <USART_tx_string+0xe>
	{
		USART_send(*stringPtr);
 16c:	0e 94 ab 00 	call	0x156	; 0x156 <USART_send>
		stringPtr++;
 170:	21 96       	adiw	r28, 0x01	; 1
	UDR0 = data;
}
// Function to send string to serial port
void USART_tx_string( char *stringPtr ) 
{
	while ((*stringPtr != '\0')) 
 172:	88 81       	ld	r24, Y
 174:	81 11       	cpse	r24, r1
 176:	fa cf       	rjmp	.-12     	; 0x16c <USART_tx_string+0x8>
	{
		USART_send(*stringPtr);
		stringPtr++;
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <led_blink>:

// Task 3
void led_blink(void)
{
	DDRB |= (1 << 5);
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	80 62       	ori	r24, 0x20	; 32
 182:	84 b9       	out	0x04, r24	; 4
	//CTC mode, Prescalar = 1024
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 184:	8d e0       	ldi	r24, 0x0D	; 13
 186:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1 = 0;
 18a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 18e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	if(adcValueX < 498)
 192:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <adcValueX>
 196:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <adcValueX+0x1>
 19a:	82 3f       	cpi	r24, 0xF2	; 242
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	92 07       	cpc	r25, r18
 1a0:	a0 f4       	brcc	.+40     	; 0x1ca <led_blink+0x4c>
	{
		OCR1A = 130; // 60Hz
 1a2:	82 e8       	ldi	r24, 0x82	; 130
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		while((TIFR1 & (1 << OCF1A)) == 0)
 1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <led_blink+0x46>
		{
			PORTB ^= (1 << 5);
 1b0:	95 b1       	in	r25, 0x05	; 5
 1b2:	80 e2       	ldi	r24, 0x20	; 32
 1b4:	89 27       	eor	r24, r25
 1b6:	85 b9       	out	0x05, r24	; 5
			TCNT1 = 0;
 1b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TIFR1 = (1 << OCF1A);
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	86 bb       	out	0x16, r24	; 22
	TCNT1 = 0;

	if(adcValueX < 498)
	{
		OCR1A = 130; // 60Hz
		while((TIFR1 & (1 << OCF1A)) == 0)
 1c4:	b1 9b       	sbis	0x16, 1	; 22
 1c6:	f4 cf       	rjmp	.-24     	; 0x1b0 <led_blink+0x32>
 1c8:	15 c0       	rjmp	.+42     	; 0x1f4 <led_blink+0x76>
			PORTB ^= (1 << 5);
			TCNT1 = 0;
			TIFR1 = (1 << OCF1A);
		}		
	}
	else if(adcValueX > 498)
 1ca:	83 3f       	cpi	r24, 0xF3	; 243
 1cc:	91 40       	sbci	r25, 0x01	; 1
 1ce:	90 f0       	brcs	.+36     	; 0x1f4 <led_blink+0x76>
	{
		//OCR1A = 130 - (1023-adcValueX)/4; // 60Hz
		OCR1A = 7813; // 1Hz
 1d0:	85 e8       	ldi	r24, 0x85	; 133
 1d2:	9e e1       	ldi	r25, 0x1E	; 30
 1d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		while((TIFR1 & (1 << OCF1A)) == 0);
 1dc:	b1 9b       	sbis	0x16, 1	; 22
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <led_blink+0x5e>
		{
			PORTB ^= (1 << 5);
 1e0:	95 b1       	in	r25, 0x05	; 5
 1e2:	80 e2       	ldi	r24, 0x20	; 32
 1e4:	89 27       	eor	r24, r25
 1e6:	85 b9       	out	0x05, r24	; 5
			TCNT1 = 0;
 1e8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1ec:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TIFR1 = (1 << OCF1A);
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	86 bb       	out	0x16, r24	; 22
		}			
	}
	
	if (adcValueX == 498)
 1f4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <adcValueX>
 1f8:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <adcValueX+0x1>
 1fc:	82 3f       	cpi	r24, 0xF2	; 242
 1fe:	91 40       	sbci	r25, 0x01	; 1
 200:	91 f4       	brne	.+36     	; 0x226 <led_blink+0xa8>
	{
		OCR1A = 260; // 30Hz
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 20a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		while((TIFR1 & (1 << OCF1A)) == 0);
 20e:	b1 9b       	sbis	0x16, 1	; 22
 210:	fe cf       	rjmp	.-4      	; 0x20e <led_blink+0x90>
		{
			PORTB ^= (1 << 5);
 212:	95 b1       	in	r25, 0x05	; 5
 214:	80 e2       	ldi	r24, 0x20	; 32
 216:	89 27       	eor	r24, r25
 218:	85 b9       	out	0x05, r24	; 5
			TCNT1 = 0;
 21a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 21e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TIFR1 = (1 << OCF1A);
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	86 bb       	out	0x16, r24	; 22
 226:	08 95       	ret

00000228 <main>:
void led_blink(void);


int main()
{
	adc_init(); // Start ADC
 228:	0e 94 79 00 	call	0xf2	; 0xf2 <adc_init>
	USART_init(); // Start USART
 22c:	0e 94 9f 00 	call	0x13e	; 0x13e <USART_init>
	USART_tx_string("Connected! \r\n"); // We're alive!
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 b2 00 	call	0x164	; 0x164 <USART_tx_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	2f e7       	ldi	r18, 0x7F	; 127
 23a:	8a e1       	ldi	r24, 0x1A	; 26
 23c:	96 e0       	ldi	r25, 0x06	; 6
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x16>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x20>
 248:	00 00       	nop
	_delay_ms(125); // wait a bit
	USART_tx_string(buffer);
 24a:	84 e2       	ldi	r24, 0x24	; 36
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 b2 00 	call	0x164	; 0x164 <USART_tx_string>
	//led();

	
	while(1)
	{
		adcValueX = read_adc(4);  // Read ADC value at PC4 channel
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	0e 94 8a 00 	call	0x114	; 0x114 <read_adc>
 258:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <adcValueX+0x1>
 25c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <adcValueX>
		USART_tx_string("X-Axis: ");
 260:	8e e0       	ldi	r24, 0x0E	; 14
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 b2 00 	call	0x164	; 0x164 <USART_tx_string>
		itoa(adcValueX, buffer, 10);
 268:	4a e0       	ldi	r20, 0x0A	; 10
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	64 e2       	ldi	r22, 0x24	; 36
 26e:	71 e0       	ldi	r23, 0x01	; 1
 270:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <adcValueX>
 274:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <adcValueX+0x1>
 278:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <itoa>
		USART_tx_string(buffer);
 27c:	84 e2       	ldi	r24, 0x24	; 36
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	0e 94 b2 00 	call	0x164	; 0x164 <USART_tx_string>
		USART_tx_string(" , ");
 284:	87 e1       	ldi	r24, 0x17	; 23
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 b2 00 	call	0x164	; 0x164 <USART_tx_string>
				
		USART_tx_string("Y-Axis: ");
 28c:	8b e1       	ldi	r24, 0x1B	; 27
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 b2 00 	call	0x164	; 0x164 <USART_tx_string>
		adcValueY = read_adc(5); // Read ADC value at PC5 channel
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	0e 94 8a 00 	call	0x114	; 0x114 <read_adc>
 29a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <adcValueY+0x1>
 29e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <adcValueY>
		itoa(adcValueY, buffer, 10);
 2a2:	4a e0       	ldi	r20, 0x0A	; 10
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	64 e2       	ldi	r22, 0x24	; 36
 2a8:	71 e0       	ldi	r23, 0x01	; 1
 2aa:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <itoa>
		USART_tx_string(buffer);
 2ae:	84 e2       	ldi	r24, 0x24	; 36
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 b2 00 	call	0x164	; 0x164 <USART_tx_string>
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	89 e6       	ldi	r24, 0x69	; 105
 2ba:	98 e1       	ldi	r25, 0x18	; 24
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x94>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x9e>
 2c6:	00 00       	nop
		//USART_tx_string(",");
		_delay_ms(500);
		USART_send('\n');
 2c8:	8a e0       	ldi	r24, 0x0A	; 10
 2ca:	0e 94 ab 00 	call	0x156	; 0x156 <USART_send>
		//blink();
		led_blink();
 2ce:	0e 94 bf 00 	call	0x17e	; 0x17e <led_blink>
 2d2:	bf cf       	rjmp	.-130    	; 0x252 <main+0x2a>

000002d4 <itoa>:
 2d4:	45 32       	cpi	r20, 0x25	; 37
 2d6:	51 05       	cpc	r21, r1
 2d8:	20 f4       	brcc	.+8      	; 0x2e2 <itoa+0xe>
 2da:	42 30       	cpi	r20, 0x02	; 2
 2dc:	10 f0       	brcs	.+4      	; 0x2e2 <itoa+0xe>
 2de:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__itoa_ncheck>
 2e2:	fb 01       	movw	r30, r22
 2e4:	10 82       	st	Z, r1
 2e6:	cb 01       	movw	r24, r22
 2e8:	08 95       	ret

000002ea <__itoa_ncheck>:
 2ea:	bb 27       	eor	r27, r27
 2ec:	4a 30       	cpi	r20, 0x0A	; 10
 2ee:	31 f4       	brne	.+12     	; 0x2fc <__itoa_ncheck+0x12>
 2f0:	99 23       	and	r25, r25
 2f2:	22 f4       	brpl	.+8      	; 0x2fc <__itoa_ncheck+0x12>
 2f4:	bd e2       	ldi	r27, 0x2D	; 45
 2f6:	90 95       	com	r25
 2f8:	81 95       	neg	r24
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	0c 94 81 01 	jmp	0x302	; 0x302 <__utoa_common>

00000300 <__utoa_ncheck>:
 300:	bb 27       	eor	r27, r27

00000302 <__utoa_common>:
 302:	fb 01       	movw	r30, r22
 304:	55 27       	eor	r21, r21
 306:	aa 27       	eor	r26, r26
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	aa 1f       	adc	r26, r26
 30e:	a4 17       	cp	r26, r20
 310:	10 f0       	brcs	.+4      	; 0x316 <__utoa_common+0x14>
 312:	a4 1b       	sub	r26, r20
 314:	83 95       	inc	r24
 316:	50 51       	subi	r21, 0x10	; 16
 318:	b9 f7       	brne	.-18     	; 0x308 <__utoa_common+0x6>
 31a:	a0 5d       	subi	r26, 0xD0	; 208
 31c:	aa 33       	cpi	r26, 0x3A	; 58
 31e:	08 f0       	brcs	.+2      	; 0x322 <__utoa_common+0x20>
 320:	a9 5d       	subi	r26, 0xD9	; 217
 322:	a1 93       	st	Z+, r26
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	79 f7       	brne	.-34     	; 0x306 <__utoa_common+0x4>
 328:	b1 11       	cpse	r27, r1
 32a:	b1 93       	st	Z+, r27
 32c:	11 92       	st	Z+, r1
 32e:	cb 01       	movw	r24, r22
 330:	0c 94 9a 01 	jmp	0x334	; 0x334 <strrev>

00000334 <strrev>:
 334:	dc 01       	movw	r26, r24
 336:	fc 01       	movw	r30, r24
 338:	67 2f       	mov	r22, r23
 33a:	71 91       	ld	r23, Z+
 33c:	77 23       	and	r23, r23
 33e:	e1 f7       	brne	.-8      	; 0x338 <strrev+0x4>
 340:	32 97       	sbiw	r30, 0x02	; 2
 342:	04 c0       	rjmp	.+8      	; 0x34c <strrev+0x18>
 344:	7c 91       	ld	r23, X
 346:	6d 93       	st	X+, r22
 348:	70 83       	st	Z, r23
 34a:	62 91       	ld	r22, -Z
 34c:	ae 17       	cp	r26, r30
 34e:	bf 07       	cpc	r27, r31
 350:	c8 f3       	brcs	.-14     	; 0x344 <strrev+0x10>
 352:	08 95       	ret

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
