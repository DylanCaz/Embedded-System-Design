
Design_Assignment_2_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a43  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000944  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000341  00000000  00000000  000015eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000500  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e6  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001f62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_1>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:



int main(void)
{
	DDRC &= (0 << 3);			// setting PORTC.3 as an input
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1 << 3);			// enabling pull up
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	88 b9       	out	0x08, r24	; 8
	DDRC &= (0 << 2);			// setting PORTC.2 as an input
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1 << 2);			// enabling pull up
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	88 b9       	out	0x08, r24	; 8
	
	DDRD &= (1 << 2);			// setting PORTD.2 as an input
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	84 70       	andi	r24, 0x04	; 4
  e4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << 2);			// enabling pull up
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	8b b9       	out	0x0b, r24	; 11

	
	DDRB |= (1 << 2);			// setting PORTB.2 as an output
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << 1);			// setting PORTB.3 as an output
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << 2);			// enabling pull up
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	84 60       	ori	r24, 0x04	; 4
  fc:	85 b9       	out	0x05, r24	; 5
	
						
    while (1) 
    {
		if(!(PINC & (1 << PINC3))) 
  fe:	33 99       	sbic	0x06, 3	; 6
 100:	10 c0       	rjmp	.+32     	; 0x122 <main+0x56>
		{
			PORTB &= ~(1 << 2);	// turn PORTB.2 LED on
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	88 e0       	ldi	r24, 0x08	; 8
 10c:	9d e3       	ldi	r25, 0x3D	; 61
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x42>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x4c>
 118:	00 00       	nop
			_delay_ms(1250);	// delay 1250 ms
			PORTB |= (1 << 2);	// turn PORTB.2 LED off
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	85 b9       	out	0x05, r24	; 5
 120:	ee cf       	rjmp	.-36     	; 0xfe <main+0x32>
		}
		else if (!(PIND & (1 << PIND2)))
 122:	4a 99       	sbic	0x09, 2	; 9
 124:	ec cf       	rjmp	.-40     	; 0xfe <main+0x32>
		{				
			EICRA = 0x02;				// make INT0 falling edge triggered
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
			EIMSK = (1 << INT0);		// enable external interrupt 0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	8d bb       	out	0x1d, r24	; 29
			sei();						// enable interrupts
 130:	78 94       	sei
 132:	e5 cf       	rjmp	.-54     	; 0xfe <main+0x32>

00000134 <__vector_1>:
		}
	}
}
ISR(INT0_vect)						// ISR for external interrupt 0
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
		PORTB ^= ~(1 << 1);			// toggle PORTB.3 on
 144:	95 b1       	in	r25, 0x05	; 5
 146:	8d ef       	ldi	r24, 0xFD	; 253
 148:	89 27       	eor	r24, r25
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	89 e6       	ldi	r24, 0x69	; 105
 150:	98 e1       	ldi	r25, 0x18	; 24
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <__vector_1+0x1e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <__vector_1+0x28>
 15c:	00 00       	nop
		_delay_ms(500);				// delaying for 500ms
		PORTB |= (1 << 3);			// toggle PORTB.3 off
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	88 60       	ori	r24, 0x08	; 8
 162:	85 b9       	out	0x05, r24	; 5
}
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
